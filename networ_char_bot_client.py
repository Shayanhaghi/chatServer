import socketimport osimport timeimport threadingimport random# check_list:# check port availability#exitFlag = 0class MyThread(threading.Thread):    def __init__(self, thread_id, name, counter):        threading.Thread.__init__(self)        self.threadID = thread_id        self.name = name        self.counter = counter    def run(self, function_name):        print("Starting " + self.name)        print_time(self.name, self.counter, 5)        print("Exiting " + self.name)def print_time(threadName, delay, counter):    while counter:        if exitFlag:            threadName.exit()        time.sleep(delay)        print("%s: %s" % (threadName, time.ctime(time.time())))        counter -= 1class TimeManager:    def __init__(self, max_time_in_sec=5):        self.max_time = max_time_in_secclass UdpBroadCaster:    def __init__(self):        self.ip_address = "127.0.0.1"        self.port_number = None        self.set_port()        self.socket = None        self.set_socket()    def set_port(self):        # self.broadCaster_port_number = random.randint(1024, 10000)        self.port_number = 2000    def set_socket(self):        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)    def send_hello(self):        message = "Hello"        self.socket.sendto(message.encode(), ('<broadcast>', 2500))        print("message sent !")class UdpListener:    def __init__(self):        self.ip_address = "0.0.0.0"        self.port_number = None        self.set_port()        self.listener = None        self.set_socket()        self.tcp_port_number = None        self.set_tcp_port_number()    def set_port(self):        self.port_number = 2500    # self.broadCaster_port_number = random.randint(1024, 10000)    def set_tcp_port_number(self):        self.tcp_port_number = random.randint(1024, 10000)    def set_socket(self):        self.listener = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)    def send_ip(self):        message = "my_ip_is_" + str(self.port_number)        self.listener.sendto(message.encode(), ('',))        print("message sent !")    def receive_from(self):        print("receiver_called")        data, address = self.listener.recvfrom(1024)        print("received message :", data, address)class Logic:    states = ["sending_req", "req_received", "chat_initiation", "chat_start"]    def __init__(self):        passclass ChatParticipant:    def __init__(self):        udpListener = UdpListener()        udpBroadCaster = UdpBroadCaster()        udpBroadCaster.send_hello()        udpListener.receive_from()        logic = Logic        udpListener = UdpListener()class ChatTester:    def __init__(self):        udpListener = UdpListener()        udpBroadCaster = UdpBroadCaster()        for i in range(1, 100):            udpBroadCaster.send_hello()        udpListener.receive_from()# chatTester = ChatTester()udpListener = UdpListener()