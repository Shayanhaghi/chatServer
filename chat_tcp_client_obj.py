import socketfrom threading import Threadfrom datetime import datetimeimport tkinterclass ChatClient:    def __init__(self, serverPort=5111, serverIP="0.0.0.0"):        self.clientSocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)        self.clientSocket.settimeout(60)        self.serverIP = serverIP        self.serverPort = serverPort        self.clientSocket.connect((self.serverIP, self.serverPort))        print('chat has been started : \n')    def start_chat(self):        while True:            sentence = input("for finishing the chat, please type <finish chat>: \n")            self.clientSocket.send(sentence.encode())            data = self.clientSocket.recv(1024)            print('From Server: ', data.decode())            if data.decode() == "<finish chat>":                self.clientSocket.close()                break        return 0class ChatClientGui():    def __init__(self):        self.chatClient = ChatClient()        self.top = tkinter.Tk()        self.top.title("Client Of Chat GUI")        self.messages_frame = tkinter.Frame(self.top)        self.my_msg = tkinter.StringVar()  # For the messages to be sent.        self.my_msg.set("Type your messages here.")        self.scrollbar = tkinter.Scrollbar(self.messages_frame)  # To navigate through past messages.        # Following will contain the messages.        self.msg_list = tkinter.Listbox(self.messages_frame, height=15, width=50, yscrollcommand=self.scrollbar.set)        self.scrollbar.pack(side=tkinter.RIGHT, fill=tkinter.Y)        self.msg_list.pack(side=tkinter.LEFT, fill=tkinter.BOTH)        self.msg_list.pack()        self.messages_frame.pack()        self.entry_field = tkinter.Entry(self.top, textvariable=self.my_msg)        self.send_button = None        self.set_ports()    def set_ports(self):        self.entry_field.bind("<Return>", self.send)        self.entry_field.pack()        self.send_button = tkinter.Button(self.top, text="Send", command=self.send)        self.send_button.pack()        self.top.protocol("WM_DELETE_WINDOW", self.on_closing)    def run(self):        receive_thread = Thread(target=self.receive)        receive_thread.start()        tkinter.mainloop()    def receive(self):        """Handles receiving of messages."""        while True:            try:                msg = self.chatClient.clientSocket.recv(1024).decode("utf8")                self.msg_list.insert(tkinter.END, msg)            except OSError:  # Possibly client has left the chat.                break    def send(self, event=None):  # event is passed by binders.        """Handles sending of messages."""        msg = self.my_msg.get()        self.my_msg.set("")  # Clears input field.        self.chatClient.clientSocket.send(bytes(msg, "utf8"))        if msg == "{quit}":            self.chatClient.clientSocket.close()            self.top.quit()    def on_closing(self, event=None):        """This function is to be called when the window is closed."""        self.my_msg.set("{quit}")        self.send()        self.chatClient.clientSocket.close()